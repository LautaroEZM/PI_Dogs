{"ast":null,"code":"import Api from './Api';\nimport { pathOr } from 'ramda';\nimport { TitleModel } from '../models/redux-models';\nimport { SearchParams } from '../types';\nconst imdbService = {\n  async searchTitle(searchParams) {\n    // TODO: API should be deployed separately to avoid hard-coding the api key\n    const response = await Api().get('AdvancedSearch/k_1fthmbb9', {\n      params: {\n        title: searchParams.q,\n        release_date: searchParams.year ? `${searchParams.year}-01-01,` : null,\n        title_type: 'feature,tv_movie',\n        count: 25,\n        genres: searchParams.genre\n      }\n    });\n    return response.data.results.length ? response.data.results.map(item => {\n      var _item$image, _item$trailer;\n      return {\n        id: item.id,\n        title: item.title,\n        description: item.description,\n        year: item.year,\n        directors: item.directors,\n        stars: item.stars,\n        image: (_item$image = item.image) !== null && _item$image !== void 0 ? _item$image : null,\n        genres: item.genres,\n        rating: item.imDbRating,\n        contentRating: item.contentRating,\n        plot: item.plot,\n        runtime: item.runtimeMins,\n        runtimeStr: item.runtimeStr,\n        countries: item.countries,\n        companies: item.companies,\n        poster: pathOr(null, ['posters', 'posters', 0, 'link'], item),\n        backdrop: pathOr(null, ['posters', 'backdrops', 0, 'link'], item),\n        trailer: (_item$trailer = item.trailer) === null || _item$trailer === void 0 ? void 0 : _item$trailer.linkEmbed\n      };\n    }) : null;\n  },\n  async getTitle(titleId) {\n    var _item$image2, _item$trailer2;\n    // TODO: API should be deployed separately to avoid hard-coding the api key\n    const response = await Api().get(`Title/k_1fthmbb9/${titleId}/Posters,Trailer,Ratings`);\n    const item = response.data;\n    return item ? {\n      id: item.id,\n      title: item.title,\n      year: item.year,\n      directors: item.directors,\n      stars: item.stars,\n      image: (_item$image2 = item.image) !== null && _item$image2 !== void 0 ? _item$image2 : null,\n      genres: item.genres,\n      rating: item.imDbRating,\n      contentRating: item.contentRating,\n      plot: item.plot,\n      runtime: item.runtimeMins,\n      runtimeStr: item.runtimeStr,\n      countries: item.countries,\n      companies: item.companies,\n      poster: pathOr(null, ['posters', 'posters', 0, 'link'], item),\n      backdrop: pathOr(null, ['posters', 'backdrops', 0, 'link'], item),\n      trailer: (_item$trailer2 = item.trailer) === null || _item$trailer2 === void 0 ? void 0 : _item$trailer2.linkEmbed\n    } : null;\n  }\n};\nexport default imdbService;","map":{"version":3,"names":["Api","pathOr","TitleModel","SearchParams","imdbService","searchTitle","searchParams","response","get","params","title","q","release_date","year","title_type","count","genres","genre","data","results","length","map","item","_item$image","_item$trailer","id","description","directors","stars","image","rating","imDbRating","contentRating","plot","runtime","runtimeMins","runtimeStr","countries","companies","poster","backdrop","trailer","linkEmbed","getTitle","titleId","_item$image2","_item$trailer2"],"sources":["C:/Users/54113/Desktop/PI/PI_Pokemon_LM/client/src/service/imdbService.js"],"sourcesContent":["import Api from './Api';\nimport { pathOr } from 'ramda';\nimport { TitleModel } from '../models/redux-models';\nimport { SearchParams } from '../types';\n\nconst imdbService = {\n  async searchTitle(searchParams: SearchParams): Promise<TitleModel[]> {\n    // TODO: API should be deployed separately to avoid hard-coding the api key\n    const response = await Api().get('AdvancedSearch/k_1fthmbb9', {\n      params: {\n        title: searchParams.q,\n        release_date: searchParams.year ? `${searchParams.year}-01-01,` : null,\n        title_type: 'feature,tv_movie',\n        count: 25,\n        genres: searchParams.genre,\n      },\n    });\n\n    return response.data.results.length\n      ? response.data.results.map((item: any) => ({\n          id: item.id,\n          title: item.title,\n          description: item.description,\n          year: item.year,\n          directors: item.directors,\n          stars: item.stars,\n          image: item.image ?? null,\n          genres: item.genres,\n          rating: item.imDbRating,\n          contentRating: item.contentRating,\n          plot: item.plot,\n          runtime: item.runtimeMins,\n          runtimeStr: item.runtimeStr,\n          countries: item.countries,\n          companies: item.companies,\n          poster: pathOr(null, ['posters', 'posters', 0, 'link'], item),\n          backdrop: pathOr(null, ['posters', 'backdrops', 0, 'link'], item),\n          trailer: item.trailer?.linkEmbed,\n        }))\n      : null;\n  },\n\n  async getTitle(titleId: string): Promise<TitleModel | null> {\n    // TODO: API should be deployed separately to avoid hard-coding the api key\n    const response = await Api().get(`Title/k_1fthmbb9/${titleId}/Posters,Trailer,Ratings`);\n    const item = response.data;\n    return item\n      ? {\n          id: item.id,\n          title: item.title,\n          year: item.year,\n          directors: item.directors,\n          stars: item.stars,\n          image: item.image ?? null,\n          genres: item.genres,\n          rating: item.imDbRating,\n          contentRating: item.contentRating,\n          plot: item.plot,\n          runtime: item.runtimeMins,\n          runtimeStr: item.runtimeStr,\n          countries: item.countries,\n          companies: item.companies,\n          poster: pathOr(null, ['posters', 'posters', 0, 'link'], item),\n          backdrop: pathOr(null, ['posters', 'backdrops', 0, 'link'], item),\n          trailer: item.trailer?.linkEmbed,\n        }\n      : null;\n  },\n};\n\nexport default imdbService;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}