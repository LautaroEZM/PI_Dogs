{"ast":null,"code":"import titlesSlice from './titles-slice';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { ThunkAction } from '@reduxjs/toolkit';\nimport { RootState } from '../index';\nimport { TitleModel } from '../../models/redux-models';\nimport { SearchParams } from '../../types';\nimport ImdbService from '../../service/imdbService';\nexport const titlesActions = titlesSlice.actions;\nexport const reset = () => {\n  return (dispatch, getState) => {\n    dispatch(titlesActions.reset());\n  };\n};\nexport const searchTitle = searchParams => {\n  return async (dispatch, getState) => {\n    dispatch(titlesActions.setLoading(true));\n    const response = await ImdbService.searchTitle(searchParams);\n    dispatch(titlesActions.setTitles(response));\n    dispatch(titlesActions.setLoading(false));\n  };\n};\nexport const getTitle = titleId => {\n  return async (dispatch, getState) => {\n    var _getState$titles, _getState$titles$titl;\n    if (((_getState$titles = getState().titles) === null || _getState$titles === void 0 ? void 0 : (_getState$titles$titl = _getState$titles.title) === null || _getState$titles$titl === void 0 ? void 0 : _getState$titles$titl.id) !== titleId) {\n      dispatch(titlesActions.setLoading(true));\n      const response = await ImdbService.getTitle(titleId);\n      dispatch(titlesActions.setTitle(response));\n      dispatch(titlesActions.setLoading(false));\n    }\n  };\n};\nexport const getTitles = titleIds => {\n  return async (dispatch, getState) => {\n    dispatch(titlesActions.setLoading(true));\n    const promises = titleIds.map(titleId => ImdbService.getTitle(titleId));\n    const responses = await Promise.all(promises);\n    dispatch(titlesActions.setTitles(responses));\n    dispatch(titlesActions.setLoading(false));\n  };\n};","map":{"version":3,"names":["titlesSlice","AnyAction","ThunkAction","RootState","TitleModel","SearchParams","ImdbService","titlesActions","actions","reset","dispatch","getState","searchTitle","searchParams","setLoading","response","setTitles","getTitle","titleId","_getState$titles","_getState$titles$titl","titles","title","id","setTitle","getTitles","titleIds","promises","map","responses","Promise","all"],"sources":["C:/Users/54113/Desktop/PI/PI_Pokemon_LM/client/src/store/titles/titles-actions.js"],"sourcesContent":["import titlesSlice from './titles-slice';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { ThunkAction } from '@reduxjs/toolkit';\nimport { RootState } from '../index';\nimport { TitleModel } from '../../models/redux-models';\nimport { SearchParams } from '../../types';\nimport ImdbService from '../../service/imdbService';\n\nexport const titlesActions = titlesSlice.actions;\n\nexport const reset = (): ThunkAction<void, RootState, unknown, AnyAction> => {\n  return (dispatch, getState) => {\n    dispatch(titlesActions.reset());\n  };\n};\n\nexport const searchTitle = (searchParams: SearchParams): ThunkAction<void, RootState, unknown, AnyAction> => {\n  return async (dispatch, getState) => {\n    dispatch(titlesActions.setLoading(true));\n    const response: TitleModel[] = await ImdbService.searchTitle(searchParams);\n    dispatch(titlesActions.setTitles(response));\n    dispatch(titlesActions.setLoading(false));\n  };\n};\n\nexport const getTitle = (titleId: string): ThunkAction<void, RootState, unknown, AnyAction> => {\n  return async (dispatch, getState) => {\n    if (getState().titles?.title?.id !== titleId) {\n      dispatch(titlesActions.setLoading(true));\n      const response: TitleModel | null = await ImdbService.getTitle(titleId);\n      dispatch(titlesActions.setTitle(response));\n      dispatch(titlesActions.setLoading(false));\n    }\n  };\n};\n\nexport const getTitles = (titleIds: string[]): ThunkAction<void, RootState, unknown, AnyAction> => {\n  return async (dispatch, getState) => {\n    dispatch(titlesActions.setLoading(true));\n    const promises = titleIds.map((titleId) => ImdbService.getTitle(titleId));\n    const responses: any | null = await Promise.all(promises);\n    dispatch(titlesActions.setTitles(responses));\n    dispatch(titlesActions.setLoading(false));\n  };\n};\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,gBAAgB;AACxC,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,UAAU;AACpC,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,YAAY,QAAQ,aAAa;AAC1C,OAAOC,WAAW,MAAM,2BAA2B;AAEnD,OAAO,MAAMC,aAAa,GAAGP,WAAW,CAACQ,OAAO;AAEhD,OAAO,MAAMC,KAAK,GAAGA,CAAA,KAAwD;EAC3E,OAAO,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC7BD,QAAQ,CAACH,aAAa,CAACE,KAAK,CAAC,CAAC,CAAC;EACjC,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,WAAW,GAAIC,YAA0B,IAAuD;EAC3G,OAAO,OAAOH,QAAQ,EAAEC,QAAQ,KAAK;IACnCD,QAAQ,CAACH,aAAa,CAACO,UAAU,CAAC,IAAI,CAAC,CAAC;IACxC,MAAMC,QAAsB,GAAG,MAAMT,WAAW,CAACM,WAAW,CAACC,YAAY,CAAC;IAC1EH,QAAQ,CAACH,aAAa,CAACS,SAAS,CAACD,QAAQ,CAAC,CAAC;IAC3CL,QAAQ,CAACH,aAAa,CAACO,UAAU,CAAC,KAAK,CAAC,CAAC;EAC3C,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,QAAQ,GAAIC,OAAe,IAAuD;EAC7F,OAAO,OAAOR,QAAQ,EAAEC,QAAQ,KAAK;IAAA,IAAAQ,gBAAA,EAAAC,qBAAA;IACnC,IAAI,EAAAD,gBAAA,GAAAR,QAAQ,CAAC,CAAC,CAACU,MAAM,cAAAF,gBAAA,wBAAAC,qBAAA,GAAjBD,gBAAA,CAAmBG,KAAK,cAAAF,qBAAA,uBAAxBA,qBAAA,CAA0BG,EAAE,MAAKL,OAAO,EAAE;MAC5CR,QAAQ,CAACH,aAAa,CAACO,UAAU,CAAC,IAAI,CAAC,CAAC;MACxC,MAAMC,QAA2B,GAAG,MAAMT,WAAW,CAACW,QAAQ,CAACC,OAAO,CAAC;MACvER,QAAQ,CAACH,aAAa,CAACiB,QAAQ,CAACT,QAAQ,CAAC,CAAC;MAC1CL,QAAQ,CAACH,aAAa,CAACO,UAAU,CAAC,KAAK,CAAC,CAAC;IAC3C;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMW,SAAS,GAAIC,QAAkB,IAAuD;EACjG,OAAO,OAAOhB,QAAQ,EAAEC,QAAQ,KAAK;IACnCD,QAAQ,CAACH,aAAa,CAACO,UAAU,CAAC,IAAI,CAAC,CAAC;IACxC,MAAMa,QAAQ,GAAGD,QAAQ,CAACE,GAAG,CAAEV,OAAO,IAAKZ,WAAW,CAACW,QAAQ,CAACC,OAAO,CAAC,CAAC;IACzE,MAAMW,SAAqB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;IACzDjB,QAAQ,CAACH,aAAa,CAACS,SAAS,CAACa,SAAS,CAAC,CAAC;IAC5CnB,QAAQ,CAACH,aAAa,CAACO,UAAU,CAAC,KAAK,CAAC,CAAC;EAC3C,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module"}